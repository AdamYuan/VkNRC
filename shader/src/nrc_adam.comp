#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "Constant.glsl"

#define LEARNING_RATE 0.001
#define EPSILON 1e-8

layout(std430, binding = 0) writeonly buffer uuWeights { float16_t uWeights[]; };
layout(std430, binding = 1) buffer uuFPWeights { float uFPWeights[]; };
layout(std430, binding = 2) readonly buffer uuGradients { float uGradients[]; };
layout(std430, binding = 3) buffer uuAdamEntries { vec2 uAdamEntries[]; };
layout(binding = 4) uniform uuBatchTrainCount { uint uBatchTrainCount; };
layout(binding = 5) uniform uuAdamState {
	uint uStep;
	float uBeta1_T, uBeta2_T;
};

void main() {
	float gradient = uGradients[gl_GlobalInvocationID.x] / float(uBatchTrainCount) / LOSS_SCALE;
	if (isnan(gradient) || isinf(gradient))
		gradient = 0.0;

	vec2 moment = uAdamEntries[gl_GlobalInvocationID.x];
	moment = vec2(ADAM_BETA1, ADAM_BETA2) * moment +
	         (1.0 - vec2(ADAM_BETA1, ADAM_BETA2)) * vec2(gradient, gradient * gradient);
	uAdamEntries[gl_GlobalInvocationID.x] = moment;

	float fp_weight = uFPWeights[gl_GlobalInvocationID.x];
	vec2 h_moment = moment / (1.0 - vec2(uBeta1_T, uBeta2_T));
	fp_weight -= LEARNING_RATE * h_moment.x / (sqrt(h_moment.y) + EPSILON);
	uFPWeights[gl_GlobalInvocationID.x] = fp_weight;

	uWeights[gl_GlobalInvocationID.x] = float16_t(fp_weight);
}
