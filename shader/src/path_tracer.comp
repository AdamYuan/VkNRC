#version 460
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#define MAX_BOUNCE 8
#define T_MIN 1e-6
#define T_MAX 4.0
#define C 0.01

#include "CookTorranceBRDF.glsl"
#include "NRCRecord.glsl"

#define SCENE_TLAS_BINDING 0
#define SCENE_TEXTURE_BINDING 8
#define SCENE_TEXTURE_NUM_CONST_ID 0
#define SCENE_BUFFERS_FIRST_BINDING 1
#include "Scene.glsl"

#define METHOD_NONE 0
#define METHOD_NRC 1
#define METHOD_CACHE 2

layout(push_constant) uniform uuPushConstant {
	vec3 uOrigin, uLook, uSide, uUp;
	uint uSeed;
	uvec2 uExtent;
	uint uLeftMethod, uRightMethod;
	float uTrainProbability;
};

// V-Buffer
layout(binding = 9) uniform usampler2D uPrimitiveID_InstanceID;
// NRC
layout(binding = 12) buffer uuEvalCount { uint uEvalCount; };
layout(std430, binding = 13) writeonly buffer uuEvalInputs { NRCInput uEvalInputs[]; };
layout(std430, binding = 14) writeonly buffer uuEvalDests { uint uEvalDests[]; };

layout(binding = 15) buffer uuBatchTrainCounts { uint count; }
uBatchTrainCounts[NRC_TRAIN_BATCH_COUNT];
layout(std430, binding = 16) writeonly buffer uuBatchTrainInputs { NRCInput inputs[]; }
uBatchTrainInputs[NRC_TRAIN_BATCH_COUNT];
layout(std430, binding = 17) writeonly buffer uuBatchTrainTargetBiases { NRCOutput biases[]; }
uBatchTrainTargetBiases[NRC_TRAIN_BATCH_COUNT];
layout(std430, binding = 18) writeonly buffer uuBatchTrainTargetFactors { NRCOutput factors[]; }
uBatchTrainTargetFactors[NRC_TRAIN_BATCH_COUNT];

layout(binding = 19, rgba32f) writeonly uniform image2D uBias_FactorR;
layout(binding = 20, rg32f) writeonly uniform image2D uFactorGB;

struct Ray {
	vec3 o, d;
};

struct Hit {
	vec3 position;
	uint primitive_id;
	vec3 normal;
	uint instance_id;
	vec2 texcoord;
	vec2 barycentric;
	Material material;
	vec3 diffuse;
	vec3 specular;
	vec3 emission;
	bool flip_normal;
};

Hit GetVBufferHit(in const uint primitive_id, in const uint instance_id, in const Ray ray) {
	vec2 texcoord_0 = GetSceneTexcoord(primitive_id, 0);
	vec2 texcoord_1 = GetSceneTexcoord(primitive_id, 1);
	vec2 texcoord_2 = GetSceneTexcoord(primitive_id, 2);
	vec3 vertex_0 = GetSceneVertex(instance_id, primitive_id, 0);
	vec3 vertex_1 = GetSceneVertex(instance_id, primitive_id, 1);
	vec3 vertex_2 = GetSceneVertex(instance_id, primitive_id, 2);
	vec3 v01 = vertex_1 - vertex_0, v02 = vertex_2 - vertex_0, v0o = ray.o - vertex_0;
	vec3 n = cross(v01, v02);
	vec3 q = cross(v0o, ray.d);
	float d = 1.0 / dot(ray.d, n);
	float u = d * dot(-q, v02);
	float v = d * dot(q, v01);
	vec3 barycentric = vec3(1.0 - u - v, u, v);

	n = normalize(n);

	Hit hit;
	hit.flip_normal = dot(n, ray.d) >= 0;
	hit.normal = hit.flip_normal ? -n : n;
	hit.primitive_id = primitive_id;
	hit.instance_id = instance_id;
	hit.barycentric = barycentric.yz;
	hit.position = mat3(vertex_0, vertex_1, vertex_2) * barycentric;
	hit.texcoord = mat3x2(texcoord_0, texcoord_1, texcoord_2) * barycentric;
	hit.material = GetSceneMaterial(primitive_id);
	hit.diffuse = GetSceneDiffuse(hit.material, hit.texcoord);
	hit.emission = GetSceneEmission(hit.material, hit.texcoord);
	hit.specular = GetSceneSpecular(hit.material, hit.texcoord);

	return hit;
}

Hit GetRayQueryHit(in const rayQueryEXT ray_query, in const Ray ray) {
	// Base PrimitiveID + Instance PrimitiveID
	uint primitive_id = rayQueryGetIntersectionInstanceCustomIndexEXT(ray_query, true) +
	                    rayQueryGetIntersectionPrimitiveIndexEXT(ray_query, true);
	uint instance_id = rayQueryGetIntersectionInstanceIdEXT(ray_query, true);

	vec2 texcoord_0 = GetSceneTexcoord(primitive_id, 0);
	vec2 texcoord_1 = GetSceneTexcoord(primitive_id, 1);
	vec2 texcoord_2 = GetSceneTexcoord(primitive_id, 2);
	vec3 vertex_0 = GetSceneVertex(instance_id, primitive_id, 0);
	vec3 vertex_1 = GetSceneVertex(instance_id, primitive_id, 1);
	vec3 vertex_2 = GetSceneVertex(instance_id, primitive_id, 2);
	vec3 n = normalize(cross(vertex_1 - vertex_0, vertex_2 - vertex_0));

	vec3 barycentric = vec3(0, rayQueryGetIntersectionBarycentricsEXT(ray_query, true));
	barycentric.x = 1.0 - barycentric.y - barycentric.z;

	Hit hit;
	hit.flip_normal = dot(n, ray.d) >= 0;
	hit.normal = hit.flip_normal ? -n : n;
	hit.primitive_id = primitive_id;
	hit.instance_id = instance_id;
	hit.barycentric = barycentric.yz;
	hit.position = mat3(vertex_0, vertex_1, vertex_2) * barycentric;
	hit.texcoord = mat3x2(texcoord_0, texcoord_1, texcoord_2) * barycentric;
	hit.material = GetSceneMaterial(primitive_id);
	hit.diffuse = GetSceneDiffuse(hit.material, hit.texcoord);
	hit.specular = GetSceneSpecular(hit.material, hit.texcoord);
	hit.emission = GetSceneEmission(hit.material, hit.texcoord);
	return hit;
}

CookTorranceBRDFArgs GetHitBRDFArgs(in const Hit hit) {
	CookTorranceBRDFArgs args;
	args.diffuse = hit.diffuse;
	args.specular = hit.specular;
	args.roughness = max(hit.material.roughness, 0.001);
	args.ior = max(hit.material.ior, 1.5);
	return args;
}

const vec3 kConstLight = vec3(10, 10, 10);

vec3 NormalizeRGB(in const vec3 rgb) { return !any(isnan(rgb)) && !any(isinf(rgb)) ? max(rgb, vec3(0)) : vec3(0); }

struct BRDFStepInfo {
	vec3 color;
	float cosine;
	Ray ray;
	float pdf;
	float dist2;
};

float _distance_2(in const vec3 l, in const vec3 r) {
	vec3 d = l - r;
	return dot(d, d);
}

NRCInput MakeNRCInput(in const Hit hit, in const vec3 d) {
	NRCInput i;
	i.pos[0] = hit.position[0];
	i.pos[1] = hit.position[1];
	i.pos[2] = hit.position[2];
	vec2 scat = NRCSphEncode(d);
	i.scat[0] = scat[0];
	i.scat[1] = scat[1];
	vec2 norm = NRCSphEncode(hit.normal);
	i.norm[0] = norm[0];
	i.norm[1] = norm[1];
	i.roughness = hit.material.roughness;
	i.diff[0] = hit.diffuse[0];
	i.diff[1] = hit.diffuse[1];
	i.diff[2] = hit.diffuse[2];
	i.spec[0] = hit.specular[0];
	i.spec[1] = hit.specular[1];
	i.spec[2] = hit.specular[2];
	return i;
}

BRDFStepInfo BRDFStep(in const Hit hit, in const Ray ray) {
	CookTorranceBRDFArgs brdf_args = GetHitBRDFArgs(hit);
	vec3 dir;
	float pdf;
	{
		vec4 sample_dir_pdf = CookTorranceSample(brdf_args, -ray.d, hit.normal);
		dir = sample_dir_pdf.xyz;
		pdf = sample_dir_pdf.w;
	}
	vec3 brdf = CookTorranceBRDF(brdf_args, dir, -ray.d, hit.normal); // sample_dir is incidence dir
	float cosine = abs(dot(hit.normal, dir));
	vec3 color = NormalizeRGB(brdf * cosine / pdf);
	BRDFStepInfo info;
	info.color = color;
	info.ray = Ray(hit.position, dir);
	info.cosine = cosine;
	info.pdf = pdf;
	info.dist2 = _distance_2(ray.o, hit.position);
	return info;
}

BRDFStepInfo BRDFQuery(in const Hit hit, in const Ray ray, in const vec3 dir) {
	CookTorranceBRDFArgs brdf_args = GetHitBRDFArgs(hit);
	float pdf = CookTorrancePDF(brdf_args, dir, -ray.d, hit.normal);
	vec3 brdf = CookTorranceBRDF(brdf_args, dir, -ray.d, hit.normal);
	float cosine = abs(dot(hit.normal, dir));
	vec3 color = NormalizeRGB(brdf * cosine / pdf);
	BRDFStepInfo info;
	info.color = color;
	info.ray = Ray(hit.position, dir);
	info.cosine = cosine;
	info.pdf = pdf;
	info.dist2 = _distance_2(ray.o, hit.position);
	return info;
}

struct PathTraceResult {
	vec3 bias, factor;
};

PathTraceResult PathTrace(Hit hit, Ray ray, in const uint method) {
	vec3 radiance = vec3(0), accumulate = vec3(1);

	BRDFStepInfo info = BRDFStep(hit, ray);
	radiance += accumulate * hit.emission;
	accumulate *= info.color;
	ray = info.ray;

	float inf32 = uintBitsToFloat(0x7F800000u);

	float c_a0 = subgroupAll(method == METHOD_NONE) ? inf32 : C * info.dist2 / (4 * M_PI * info.cosine);

	float sqrt_a_sum = 0.0;
	if (subgroupAll(method != METHOD_CACHE)) {
		for (uint bounce = 1; bounce < MAX_BOUNCE && sqrt_a_sum * sqrt_a_sum <= c_a0; ++bounce) {
			rayQueryEXT ray_query;
			rayQueryInitializeEXT(ray_query, uTLAS, gl_RayFlagsOpaqueEXT, 0xFF, ray.o, T_MIN, ray.d, T_MAX);
			while (rayQueryProceedEXT(ray_query))
				;

			if (rayQueryGetIntersectionTypeEXT(ray_query, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
				hit = GetRayQueryHit(ray_query, ray);
				info = BRDFStep(hit, ray);
				radiance += accumulate * hit.emission;
				accumulate *= info.color;
				ray = info.ray;
				sqrt_a_sum += sqrt(info.dist2 / (info.pdf * info.cosine));
			} else {
				radiance += accumulate * kConstLight;
				return PathTraceResult(radiance, accumulate);
			}
		}
	}

	if (subgroupAll(method != METHOD_NONE)) {
		// Push a EvalRecord
		uint eval_id = atomicAdd(uEvalCount, 1u, gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsRelaxed);
		uEvalInputs[eval_id] = MakeNRCInput(hit, ray.d);
		uEvalDests[eval_id] = EncodeNRCEvalDstScreen(gl_GlobalInvocationID.xy);
	}

	return PathTraceResult(radiance, accumulate);
}

PathTraceResult ExtendedPathTrace(Hit hit, Ray ray, in const uint method) {
	// assert(method != METHOD_NONE)
	vec3 lights[MAX_BOUNCE], colors[MAX_BOUNCE];
	NRCInput inputs[MAX_BOUNCE];

	[[unroll]] for (uint i = 0; i < MAX_BOUNCE; ++i) {
		colors[i] = vec3(1);
		lights[i] = vec3(0);
	}

	vec3 accumulate = vec3(1), radiance = vec3(0);
	bool light_terminate = false;

	BRDFStepInfo info = BRDFStep(hit, ray);
	radiance += accumulate * hit.emission;
	accumulate *= info.color;
	ray = info.ray;

	PathTraceResult result = PathTraceResult(radiance, accumulate);

	inputs[0] = MakeNRCInput(hit, ray.d);

	float c_a0 = C * info.dist2 / (4 * M_PI * info.cosine);
	float sqrt_a_sum = 0.0;
	uint bounce = 1;
	for (; bounce < MAX_BOUNCE && sqrt_a_sum * sqrt_a_sum <= c_a0; ++bounce) {
		rayQueryEXT ray_query;
		rayQueryInitializeEXT(ray_query, uTLAS, gl_RayFlagsOpaqueEXT, 0xFF, ray.o, T_MIN, ray.d, T_MAX);
		while (rayQueryProceedEXT(ray_query))
			;

		if (rayQueryGetIntersectionTypeEXT(ray_query, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
			hit = GetRayQueryHit(ray_query, ray);
			info = BRDFStep(hit, ray);
			radiance += accumulate * hit.emission;
			accumulate *= info.color;
			ray = info.ray;
			sqrt_a_sum += sqrt(info.dist2 / (info.pdf * info.cosine));
			lights[bounce - 1] = hit.emission;
			colors[bounce - 1] = info.color;
			inputs[bounce] = MakeNRCInput(hit, ray.d);
		} else {
			radiance += accumulate * kConstLight;
			lights[bounce - 1] = kConstLight;
			light_terminate = true;
			break;
		}
	}
	if (subgroupAll(method == METHOD_CACHE)) {
		uint eval_id = atomicAdd(uEvalCount, 1u, gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsRelaxed);
		uEvalInputs[eval_id] = inputs[0];
		uEvalDests[eval_id] = EncodeNRCEvalDstScreen(gl_GlobalInvocationID.xy);
	} else {
		result = PathTraceResult(radiance, accumulate);
		if (!light_terminate) {
			uint eval_id =
			    atomicAdd(uEvalCount, 1u, gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsRelaxed);
			uEvalInputs[eval_id] = inputs[bounce - 1];
			uEvalDests[eval_id] = EncodeNRCEvalDstScreen(gl_GlobalInvocationID.xy);
		}
	}

	sqrt_a_sum = 0;
	light_terminate = false;
	for (; bounce < MAX_BOUNCE && sqrt_a_sum * sqrt_a_sum <= c_a0; ++bounce) {
		rayQueryEXT ray_query;
		rayQueryInitializeEXT(ray_query, uTLAS, gl_RayFlagsOpaqueEXT, 0xFF, ray.o, T_MIN, ray.d, T_MAX);
		while (rayQueryProceedEXT(ray_query))
			;

		if (rayQueryGetIntersectionTypeEXT(ray_query, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
			hit = GetRayQueryHit(ray_query, ray);
			info = BRDFStep(hit, ray);
			ray = info.ray;
			sqrt_a_sum += sqrt(info.dist2 / (info.pdf * info.cosine));
			lights[bounce - 1] = hit.emission;
			colors[bounce - 1] = info.color;
			inputs[bounce] = MakeNRCInput(hit, ray.d);
		} else {
			lights[bounce - 1] = kConstLight;
			light_terminate = true;
			break;
		}
	}

	uint batch = clamp(uint(RNGNext() * NRC_TRAIN_BATCH_COUNT), 0u, NRC_TRAIN_BATCH_COUNT - 1);
	uint first_train_id = atomicAdd(uBatchTrainCounts[batch].count, bounce, gl_ScopeQueueFamily,
	                                gl_StorageSemanticsBuffer, gl_SemanticsRelaxed);
	if (first_train_id < NRC_TRAIN_BATCH_SIZE) {
		for (uint i = bounce - 2u; i != -1u; --i) {
			lights[i] += colors[i] * lights[i + 1];
			colors[i] *= colors[i + 1];
		}
		uint train_count = min(bounce, NRC_TRAIN_BATCH_SIZE - first_train_id);
		for (uint i = 0; i < train_count; ++i) {
			uint train_id = first_train_id + i;
			uBatchTrainInputs[batch].inputs[train_id] = inputs[i];
			uBatchTrainTargetBiases[batch].biases[train_id].rgb = float[3](lights[i].r, lights[i].g, lights[i].b);
			uBatchTrainTargetFactors[batch].factors[train_id].rgb = float[3](colors[i].r, colors[i].g, colors[i].b);
		}

		if (!light_terminate) {
			uint eval_id =
			    atomicAdd(uEvalCount, 1u, gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsRelaxed);
			uEvalInputs[eval_id] = inputs[bounce - 1];
			uEvalDests[eval_id] = EncodeNRCEvalDstTrain(batch, first_train_id, first_train_id + train_count - 1);
		}
	}

	return result;
}

void main() {
	uvec2 coord = gl_GlobalInvocationID.xy;

	// Seed on 256 x 256 Tile
	uint seed = (((coord.y & 0xFF) << 8) | (coord.x & 0xFF)) + uSeed;
	RNGSetState(seed);

	if (any(greaterThanEqual(coord, uExtent)))
		return;

	uint method = subgroupAll(coord.x <= uExtent.x / 2) ? uLeftMethod : uRightMethod;

	bool train = false;
	if (subgroupAll(method != METHOD_NONE)) {
		if (subgroupElect())
			train = RNGNext() < uTrainProbability;
		train = subgroupBroadcastFirst(train);
	}

	uvec2 primitive_id_instance_id = texelFetch(uPrimitiveID_InstanceID, ivec2(coord), 0).rg;
	uint primitive_id = primitive_id_instance_id.x, instance_id = primitive_id_instance_id.y;

	PathTraceResult result;
	if (primitive_id == -1u)
		result = PathTraceResult(kConstLight, vec3(0));
	else {
		Ray ray;
		{
			vec2 clip = (vec2(coord) + 0.5) / vec2(uExtent);
			clip = clip * 2.0 - 1.0;
			ray = Ray(uOrigin, normalize(uLook + clip.x * uSide + clip.y * uUp));
		}
		Hit hit = GetVBufferHit(primitive_id, instance_id, ray);
		if (subgroupAll(train))
			result = ExtendedPathTrace(hit, ray, method);
		else if (subgroupAll(!train))
			result = PathTrace(hit, ray, method);
	}

	result.bias = NormalizeRGB(result.bias);
	result.factor = NormalizeRGB(result.factor);
	imageStore(uBias_FactorR, ivec2(coord), vec4(result.bias, result.factor.r));
	imageStore(uFactorGB, ivec2(coord), vec4(result.factor.gb, 0, 0));
}
