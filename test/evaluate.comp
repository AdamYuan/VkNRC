// Tester
#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_control_flow_attributes : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_memory_scope_semantics : require
#define WORKGROUP_SIZE 128
#define SUBGROUP_COUNT (WORKGROUP_SIZE / SUBGROUP_SIZE)
#if SUBGROUP_COUNT > 4
#error gl_SubgroupSize less than 32
#endif

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer uuWeights { uvec4 uWeights[]; };
layout(std430, binding = 1) readonly buffer uuInputs { uvec4 uInputs[]; };
layout(std430, binding = 2) writeonly buffer uuOutputs { uvec2 uOutputs[]; };

#define FP16_PER_UV4 8

// Counts
#define FP_X 64
#define ACT_Y WORKGROUP_SIZE
#define ACT_COUNT (FP_X * ACT_Y)
#define WEIGHT_64_COUNT (FP_X * 64)
#define WEIGHT_16_COUNT (FP_X * 16)
// UVec4 Counts
#define UV4_X (FP_X / FP16_PER_UV4)                          // 8
#define ACT_UV4_COUNT (ACT_COUNT / FP16_PER_UV4)             // 1024
#define WEIGHT_64_UV4_COUNT (WEIGHT_64_COUNT / FP16_PER_UV4) // 512
#define WEIGHT_16_UV4_COUNT (WEIGHT_16_COUNT / FP16_PER_UV4) // 24
// Cooperative Matrix Counts
#define COOPMAT_X (FP_X / 16)                                 // 4
#define ACT_COOPMAT_COUNT (ACT_COUNT / (16 * 16))             // 32
#define ACT_COOPMAT_Y (ACT_Y / 16)                            // 8
#define WEIGHT_64_COOPMAT_COUNT (WEIGHT_64_COUNT / (16 * 16)) // 16
// Subgroup
#define SUBGROUP_COOPMAT_ROW (COOPMAT_X / SUBGROUP_COUNT)
// Subgroup Weight Counts
#define SUBGROUP_WEIGHT_64_COUNT (WEIGHT_64_COUNT / SUBGROUP_COUNT)
#define SUBGROUP_WEIGHT_64_UV4_COUNT (WEIGHT_64_UV4_COUNT / SUBGROUP_COUNT)
#define SUBGROUP_WEIGHT_64_COOPMAT_COUNT (WEIGHT_64_COOPMAT_COUNT / SUBGROUP_COUNT)
// Thread Weight Counts
#define THREAD_WEIGHT_64_COUNT (WEIGHT_64_COUNT / WORKGROUP_SIZE)
#define THREAD_WEIGHT_64_UV4_COUNT (WEIGHT_64_UV4_COUNT / WORKGROUP_SIZE)
#define THREAD_WEIGHT_64_COOPMAT_COUNT (WEIGHT_64_COOPMAT_COUNT / WORKGROUP_SIZE)
// Subgroup Activates Counts
#define SUBGROUP_ACT_COUNT (ACT_COUNT / SUBGROUP_COUNT)
#define SUBGROUP_ACT_UV4_COUNT (ACT_UV4_COUNT / SUBGROUP_COUNT)
#define SUBGROUP_ACT_COOPMAT_COUNT (ACT_COOPMAT_COUNT / SUBGROUP_COUNT)
#define SUBGROUP_ACT_COOPMAT_Y (ACT_COOPMAT_Y / SUBGROUP_COUNT)
// Matrix Strides & Major
#define MAT64_COOPMAT_STRIDE (64 / FP16_PER_UV4)
#define MAT64_COOPMAT_ELEMENT(X, Y) ((X) * (16 / FP16_PER_UV4) + (Y)*16 * MAT64_COOPMAT_STRIDE)
#define WEIGHT_COOPMAT_MAJOR gl_CooperativeMatrixLayoutRowMajor
#define ACT_COOPMAT_MAJOR gl_CooperativeMatrixLayoutColumnMajor

shared uvec4 sActs[ACT_UV4_COUNT];
shared uvec4 sWeights[WEIGHT_64_UV4_COUNT];

void LoadFirstActs() {
	uint global_id = gl_GlobalInvocationID.x, local_id = gl_LocalInvocationID.x;
	uint global_base = global_id * UV4_X;
	uint local_base = local_id * UV4_X;
	[[unroll]] for (uint x = 0; x < UV4_X; ++x)
		sActs[local_base | x] = uInputs[global_base | x];
}
void LoadW64Weights(in const uint layer) {
	const uint kLayerUV4Base = layer * WEIGHT_64_UV4_COUNT;
	const uint kLocalThreadUV4Base = gl_LocalInvocationID.x * THREAD_WEIGHT_64_UV4_COUNT;
	const uint kThreadUV4Base = kLayerUV4Base + kLocalThreadUV4Base;
	[[unroll]] for (uint i = 0; i < THREAD_WEIGHT_64_UV4_COUNT; ++i)
		sWeights[kLocalThreadUV4Base + i] = uWeights[kThreadUV4Base + i];
}
void LoadW16Weights(in const uint layer) {
#if WEIGHT_16_UV4_COUNT != WORKGROUP_SIZE
#error
#endif
	const uint kLayerUV4Base = layer * WEIGHT_64_UV4_COUNT;
	sWeights[gl_LocalInvocationID.x] = uWeights[kLayerUV4Base + gl_LocalInvocationID.x];
}

void Forward64() {
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA> subgroup_weight_coopmats[SUBGROUP_COOPMAT_ROW]
	                                                                                    [COOPMAT_X];
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>
	    subgroup_dst_act_coopmats[ACT_COOPMAT_Y][SUBGROUP_COOPMAT_ROW];
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseB> act_coopmat;
	// Load Weights
	[[unroll]] for (uint r = 0; r < SUBGROUP_COOPMAT_ROW; ++r) {
		[[unroll]] for (uint x = 0; x < COOPMAT_X; ++x)
			coopMatLoad(subgroup_weight_coopmats[r][x], sWeights,
			            MAT64_COOPMAT_ELEMENT(x, r + gl_SubgroupID * SUBGROUP_COOPMAT_ROW), MAT64_COOPMAT_STRIDE,
			            WEIGHT_COOPMAT_MAJOR);
	}
	// Zero Initialize
	[[unroll]] for (uint y = 0; y < ACT_COOPMAT_Y; ++y) {
		[[unroll]] for (uint r = 0; r < SUBGROUP_COOPMAT_ROW; ++r)
			subgroup_dst_act_coopmats[y][r] = coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0);
	}
	// MMA
	[[unroll]] for (uint y = 0; y < ACT_COOPMAT_Y; ++y) {
		[[unroll]] for (uint x = 0; x < COOPMAT_X; ++x) {
			// Load Activates Cooperative Matrix
			coopMatLoad(act_coopmat, sActs, MAT64_COOPMAT_ELEMENT(x, y), MAT64_COOPMAT_STRIDE, ACT_COOPMAT_MAJOR);
			[[unroll]] for (uint r = 0; r < SUBGROUP_COOPMAT_ROW; ++r)
				subgroup_dst_act_coopmats[y][r] =
				    coopMatMulAdd(subgroup_weight_coopmats[r][x], act_coopmat, subgroup_dst_act_coopmats[y][r]);
		}
	}
	// Ensure sActs and sWeights accesses are done
	barrier();
	// ReLU
	[[unroll]] for (uint y = 0; y < ACT_COOPMAT_Y; ++y) {
		[[unroll]] for (uint r = 0; r < SUBGROUP_COOPMAT_ROW; ++r) {
			[[unroll]] for (uint k = 0; k < subgroup_dst_act_coopmats[y][r].length(); ++k)
				subgroup_dst_act_coopmats[y][r][k] = max(subgroup_dst_act_coopmats[y][r][k], float16_t(0));
		}
	}
	// Store Activates
	[[unroll]] for (uint y = 0; y < ACT_COOPMAT_Y; ++y) {
		[[unroll]] for (uint r = 0; r < SUBGROUP_COOPMAT_ROW; ++r)
			coopMatStore(subgroup_dst_act_coopmats[y][r], sActs,
			             MAT64_COOPMAT_ELEMENT(r + gl_SubgroupID * SUBGROUP_COOPMAT_ROW, y), MAT64_COOPMAT_STRIDE,
			             ACT_COOPMAT_MAJOR);
	}
}

void Forward16() {
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseA> subgroup_weight_coopmats[COOPMAT_X];
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>
	    subgroup_dst_act_coopmats[SUBGROUP_ACT_COOPMAT_Y];
	coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseB> act_coopmat;
	// Load Weights
	[[unroll]] for (uint x = 0; x < COOPMAT_X; ++x)
		coopMatLoad(subgroup_weight_coopmats[x], sWeights, MAT64_COOPMAT_ELEMENT(x, 0), MAT64_COOPMAT_STRIDE,
		            WEIGHT_COOPMAT_MAJOR);
	// Zero Initialize
	[[unroll]] for (uint y = 0; y < SUBGROUP_ACT_COOPMAT_Y; ++y)
		subgroup_dst_act_coopmats[y] = coopmat<float16_t, gl_ScopeSubgroup, 16, 16, gl_MatrixUseAccumulator>(0);
	// MMA
	[[unroll]] for (uint y = 0; y < SUBGROUP_ACT_COOPMAT_Y; ++y) {
		// Global Y
		uint g_y = gl_SubgroupID * SUBGROUP_ACT_COOPMAT_Y + y;
		[[unroll]] for (uint x = 0; x < COOPMAT_X; ++x) {
			coopMatLoad(act_coopmat, sActs, MAT64_COOPMAT_ELEMENT(x, g_y), MAT64_COOPMAT_STRIDE, ACT_COOPMAT_MAJOR);
			subgroup_dst_act_coopmats[y] =
			    coopMatMulAdd(subgroup_weight_coopmats[x], act_coopmat, subgroup_dst_act_coopmats[y]);
		}
	}
	// Ensure sActs and sWeights accesses are done
	barrier();
	// ReLU
	[[unroll]] for (uint y = 0; y < SUBGROUP_ACT_COOPMAT_Y; ++y) {
		[[unroll]] for (uint k = 0; k < subgroup_dst_act_coopmats[y].length(); ++k)
			subgroup_dst_act_coopmats[y][k] = max(subgroup_dst_act_coopmats[y][k], float16_t(0));
	}
	// Store Activates
	[[unroll]] for (uint y = 0; y < SUBGROUP_ACT_COOPMAT_Y; ++y) {
		uint g_y = gl_SubgroupID * SUBGROUP_ACT_COOPMAT_Y + y;
		coopMatStore(subgroup_dst_act_coopmats[y], sActs, MAT64_COOPMAT_ELEMENT(0, g_y), MAT64_COOPMAT_STRIDE,
		             ACT_COOPMAT_MAJOR);
	}
}

void Output() {
	uint global_id = gl_GlobalInvocationID.x, local_id = gl_LocalInvocationID.x;
	uOutputs[global_id] = sActs[local_id * UV4_X].rg;
}

void main() {
	LoadFirstActs();
	LoadW64Weights(0);
	barrier();
	Forward64();
	LoadW64Weights(1);
	barrier();
	Forward64();
	LoadW64Weights(2);
	barrier();
	Forward64();
	LoadW64Weights(3);
	barrier();
	Forward64();
	LoadW64Weights(4);
	barrier();
	Forward64();
	LoadW16Weights(5);
	barrier();
	Forward16();
	barrier();
	Output();
}
